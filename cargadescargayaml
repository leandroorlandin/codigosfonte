import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.TimeZone;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;

public class UpdateApiGatewayTemplate {

    private static final String DEPLOY_FILE_NAME = "deploy.yaml";
    private static final String TEMPLATE_FILE_NAME = "template.yaml";
    private static final String OPENAPI_FILE_NAME = "openapi30.yaml";
    private static final String TIMESTAMP_FORMAT = "yyyy-MM-dd'T'HH:mm:ss'Z'";
    private static final SimpleDateFormat TIMESTAMP_FORMATTER = new SimpleDateFormat(TIMESTAMP_FORMAT);
    private static final String REST_API_LOCATION_FIELD = "Location";
    private static final String OPENAPI_FIELD = "openapi";
    private static final String OPENAPI_VERSION = "3.0.0";

    public static void main(String[] args) {
        if (args.length != 1) {
            System.err.println("Usage: java UpdateApiGatewayTemplate contratoopenapi30.yaml");
            System.exit(1);
        }

        String contratoFileName = args[0];

        try {
            // Carrega o arquivo deploy.yaml
            Map<String, Object> deploy = loadYaml(DEPLOY_FILE_NAME);

            // Altera o campo host em memória
            deploy.put("host", "XPTO");

            // Cria o campo timestamp_alteracao em memória
            deploy.put("timestamp_alteracao", getCurrentTimestamp());

            // Carrega o arquivo template.yaml
            Map<String, Object> template = loadYaml(TEMPLATE_FILE_NAME);

            // Altera o campo Location em memória para o nome do arquivo de contrato
            Map<String, Object> restApi = (Map<String, Object>) template.get("Resources");
            Map<String, Object> restApiProperties = (Map<String, Object>) restApi.get("RestApi");
            restApiProperties.put(REST_API_LOCATION_FIELD, contratoFileName);

            // Carrega o arquivo contratoopenapi30.yaml
            Map<String, Object> contrato = loadYaml(contratoFileName);

            // Atualiza o campo openapi no arquivo contrato
            contrato.put(OPENAPI_FIELD, OPENAPI_VERSION);

            // Atualiza o arquivo template.yaml com os dados da memória
            saveYaml(TEMPLATE_FILE_NAME, template);

            // Atualiza o arquivo deploy.yaml com os dados da memória
            saveYaml(OPENAPI_FILE_NAME, deploy);
        } catch (IOException e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }

        System.out.println("Arquivos atualizados com sucesso!");
    }

    private static Map<String, Object> loadYaml(String fileName) throws IOException {
        YAMLFactory yamlFactory = new YAMLFactory();
        ObjectMapper objectMapper = new ObjectMapper(yamlFactory);
        Path filePath = Paths.get(fileName);
        if (!Files.exists(filePath)) {
            throw new FileNotFoundException("File not found: " + fileName);
        }
        try (InputStream input = new FileInputStream(filePath.toFile())) {
            return objectMapper.readValue(input, HashMap.class);
        }
    }

    private static void saveYaml(String fileName, Map<String, Object> data) throws IOException {
        YAMLFactory yamlFactory = new YAMLFactory()
                .enable(YAMLGenerator.Feature.MINIMIZE_QUOTES)
                .enable(YAMLGenerator.Feature.ALWAYS_QUOTE_NUMBERS_AS_STRINGS);
        ObjectMapper objectMapper = new ObjectMapper
