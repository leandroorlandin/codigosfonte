Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        openapi: 3.0.0
        info:
          title: My API
          version: '1.0'
        paths:
          /myendpoint:
            post:
              responses:
                '200':
                  description: OK
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/MyRequest'

  MyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApi
      ResourceId: !GetAtt MyApi.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.Content-Type: true
      RequestModels:
        application/json: !Ref RequestModel
      Integration:
        Type: AWS_PROXY
        Uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: '200'

  MyApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref MyApi
      StageName: prod
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          ThrottlingBurstLimit: 500
          ThrottlingRateLimit: 1000
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: '$context.requestTime $context.requestId $context.identity.sourceIp $context.identity.userAgent $context.httpMethod $context.resourcePath $context.protocol $context.status $context.responseLength $context.requestLength'

  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${MyApi}/access-log'

  RequestModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref MyApi
      ContentType: application/json
      Schema:
        type: object
        properties:
          body:
            type: string
            maxLength: 512000
