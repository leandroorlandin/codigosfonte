from ruamel.yaml.resolver import Resolver
from ruamel.yaml.reader import Reader
from ruamel.yaml.parser import Parser
from ruamel.yaml.composer import Composer
from ruamel.yaml.constructor import SafeConstructor
from ruamel.yaml.constructor import ConstructorError
from ruamel.yaml.scanner import ScannerError
from ruamel.yaml import YAMLError

def resolve_yaml_references(yaml_data):
    class ResolverWithRefs(Resolver):
        def descend_resolver(self, current_node):
            if isinstance(current_node, dict) and "$ref" in current_node:
                ref_node = current_node["$ref"]
                return self.resolve(ref_node, current_node)
            return super().descend_resolver(current_node)

    try:
        resolver = ResolverWithRefs(Reader(yaml_data), Parser, Composer, SafeConstructor)
        constructor = SafeConstructor()
        constructor.resolver = resolver
        composer = Composer(resolver)
        try:
            composer.get_single_node()
        except (ScannerError, ParserError) as e:
            raise YAMLError(f"Error parsing YAML: {str(e)}")

        return constructor.construct_document(composer.get_single_node())

    except ConstructorError as e:
        raise YAMLError(f"Error constructing YAML document: {str(e)}")

# Exemplo de uso:
with open("openAPI.yaml", "r") as file:
    yaml_data = file.read()

resolved_yaml = resolve_yaml_references(yaml_data)

# Agora vocÃª pode usar o objeto `resolved_yaml` para trabalhar com os dados YAML resolvidos
